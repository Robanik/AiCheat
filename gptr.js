// –ò—â–µ–º –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
function findAnswer(message) {
  const words = message.toLowerCase().replace(/[^\w\s–∞-—è—ë]/gi, '').split(/\s+/);

  let bestMatch = null;
  let maxMatched = 0;

  for (let item of knowledge) {
    const matchedCount = item.keywords.filter(kw => words.includes(kw)).length;
    if (matchedCount === item.keywords.length && matchedCount > maxMatched) {
      bestMatch = item.answer;
      maxMatched = matchedCount;
    }
  }

  return bestMatch || "ü§ñ –Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞, –Ω–æ —É—á—É—Å—å!";
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å —ç—Ç–∞–ø–∞–º–∏ –æ–±–¥—É–º—ã–≤–∞–Ω–∏—è
function getBotResponse(userMessage, callback) {
  const stages = [
    "ü§ñ –ß–∏—Ç–∞—é —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ...",
    "ü§ñ –ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è...",
    "ü§ñ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º..."
  ];

  let stageIndex = 0;

  function nextStage() {
    if (stageIndex < stages.length) {
      callback(stages[stageIndex], false);
      stageIndex++;
      setTimeout(nextStage, 1200); // 1.2 —Å–µ–∫ –Ω–∞ —ç—Ç–∞–ø
    } else {
      const response = findAnswer(userMessage);
      callback(response, true);
    }
  }

  nextStage();
}
